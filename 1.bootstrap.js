(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "../pkg/triangulation.js":
/*!*******************************!*\
  !*** ../pkg/triangulation.js ***!
  \*******************************/
/*! exports provided: init_panic_hook, Point, Polygon, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbg_error_4bb6c2a97407129a, __wbindgen_object_drop_ref, __wbindgen_string_new, __widl_f_debug_1_, __widl_f_error_1_, __widl_f_info_1_, __widl_f_log_1_, __widl_f_warn_1_, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init_panic_hook\", function() { return init_panic_hook; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return Point; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Polygon\", function() { return Polygon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return __wbg_new_59cb74e423758ede; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return __wbg_stack_558ba5917b466edd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return __wbg_error_4bb6c2a97407129a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_string_new\", function() { return __wbindgen_string_new; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_debug_1_\", function() { return __widl_f_debug_1_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_error_1_\", function() { return __widl_f_error_1_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_info_1_\", function() { return __widl_f_info_1_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_log_1_\", function() { return __widl_f_log_1_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_warn_1_\", function() { return __widl_f_warn_1_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./triangulation_bg.wasm */ \"../pkg/triangulation_bg.wasm\");\n\n\n/**\n*/\nfunction init_panic_hook() {\n    _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"init_panic_hook\"]();\n}\n\nlet cachegetFloat32Memory = null;\nfunction getFloat32Memory() {\n    if (cachegetFloat32Memory === null || cachegetFloat32Memory.buffer !== _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetFloat32Memory = new Float32Array(_triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetFloat32Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm(arg) {\n    const ptr = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](arg.length * 4);\n    getFloat32Memory().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetInt32Memory = new Int32Array(_triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nclass Point {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Point.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_point_free\"](ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get 0() {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_get_point_0\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set 0(arg0) {\n        _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_set_point_0\"](this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get 1() {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_get_point_1\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set 1(arg0) {\n        _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_set_point_1\"](this.ptr, arg0);\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @returns {Point}\n    */\n    static new(x, y) {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"point_new\"](x, y);\n        return Point.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    x() {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"point_x\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    y() {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"point_y\"](this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass Polygon {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Polygon.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_polygon_free\"](ptr);\n    }\n    /**\n    * @returns {Polygon}\n    */\n    static empty() {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"polygon_empty\"]();\n        return Polygon.__wrap(ret);\n    }\n    /**\n    * @param {Float32Array} slice\n    * @returns {Polygon}\n    */\n    static from_slice(slice) {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"polygon_from_slice\"](passArrayF32ToWasm(slice), WASM_VECTOR_LEN);\n        return Polygon.__wrap(ret);\n    }\n    /**\n    * @param {Point} a\n    */\n    push(a) {\n        _assertClass(a, Point);\n        const ptr0 = a.ptr;\n        a.ptr = 0;\n        _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"polygon_push\"](this.ptr, ptr0);\n    }\n    /**\n    */\n    ccw_sort() {\n        _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"polygon_ccw_sort\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    nb_triangulations() {\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"polygon_nb_triangulations\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {string}\n    */\n    melkmans_output() {\n        const retptr = 8;\n        const ret = _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"polygon_melkmans_output\"](retptr, this.ptr);\n        const memi32 = getInt32Memory();\n        const v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n        _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n        return v0;\n    }\n}\n\nconst __wbg_new_59cb74e423758ede = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nconst __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ret0 = passStringToWasm(ret);\n    const ret1 = WASM_VECTOR_LEN;\n    getInt32Memory()[arg0 / 4 + 0] = ret0;\n    getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\n\nconst __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    _triangulation_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1 * 1);\n    console.error(v0);\n};\n\nconst __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nconst __wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nconst __widl_f_debug_1_ = function(arg0) {\n    console.debug(getObject(arg0));\n};\n\nconst __widl_f_error_1_ = function(arg0) {\n    console.error(getObject(arg0));\n};\n\nconst __widl_f_info_1_ = function(arg0) {\n    console.info(getObject(arg0));\n};\n\nconst __widl_f_log_1_ = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nconst __widl_f_warn_1_ = function(arg0) {\n    console.warn(getObject(arg0));\n};\n\nconst __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\n\n\n//# sourceURL=webpack:///../pkg/triangulation.js?");

/***/ }),

/***/ "../pkg/triangulation_bg.wasm":
/*!************************************!*\
  !*** ../pkg/triangulation_bg.wasm ***!
  \************************************/
/*! exports provided: memory, init_panic_hook, __wbg_point_free, __wbg_get_point_0, __wbg_set_point_0, __wbg_get_point_1, __wbg_set_point_1, point_new, point_x, point_y, __wbg_polygon_free, polygon_empty, polygon_from_slice, polygon_push, polygon_ccw_sort, polygon_nb_triangulations, polygon_melkmans_output, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./triangulation.js */ \"../pkg/triangulation.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/triangulation_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var triangulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! triangulation */ \"../pkg/triangulation.js\");\n\r\n\r\nObject(triangulation__WEBPACK_IMPORTED_MODULE_0__[\"init_panic_hook\"])();\r\n\r\nlet d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\r\n\r\nlet instructions = d3.select(\"#instructions\")\r\n    .append(\"span\");\r\n\r\nlet svg = d3.select(\"body\").append(\"svg\")\r\n    .attr(\"width\", window.innerWidth)\r\n    .attr(\"height\", window.innerHeight); //TODO fit to window and scale on change\r\n\r\n// points of the polygon\r\nlet points = [];\r\nlet circles = [];\r\nlet lines = [];\r\n\r\n\r\nlet draw_line = (x1, y1, x2, y2) => {\r\n    return svg.append(\"line\")\r\n        .attr(\"x1\", x1)\r\n        .attr(\"y1\", y1)\r\n        .attr(\"x2\", x2)\r\n        .attr(\"y2\", y2)\r\n        .style(\"stroke\", \"rgb(255,0,0)\") // move style later\r\n        .style(\"stroke-width\", 2);\r\n};\r\n\r\nlet conv = (y) => {\r\n    return -y - window.innerHeight;\r\n};\r\n\r\nlet connect_polygon = (x, y) => {\r\n    if (points.length > 0) {\r\n        // try make origin bottom left better\r\n        return draw_line(points[points.length-2], -points[points.length-1] - window.innerHeight, x, y)\r\n    }\r\n};\r\n\r\nlet delete_polygon =  () => {\r\n    d3.selectAll(\"circle\")\r\n        .remove();\r\n    d3.selectAll(\"line\")\r\n        .remove();\r\n    circles = [];\r\n    lines = [];\r\n    points = [];\r\n};\r\n\r\nlet undo_move = () => {\r\n    let popped_line = lines.pop();\r\n    if (popped_line !== undefined) {\r\n        popped_line.remove();\r\n    }\r\n\r\n    if (polygon_done) {\r\n        polygon_done = false;\r\n        return;\r\n    }\r\n    let popped_circle = circles.pop();\r\n    if (popped_circle !== undefined) {\r\n        popped_circle.remove();\r\n    }\r\n\r\n    points.pop();\r\n    points.pop();\r\n};\r\n\r\nd3.select(\"body\")\r\n    .on(\"keydown\", function() {\r\n        if (d3.event.keyCode == 8) {\r\n            delete_polygon();\r\n        }\r\n        else if (d3.event.ctrlKey && d3.event.keyCode == 90) {\r\n            undo_move();\r\n        }\r\n    });\r\n\r\nlet polygon_done = false;\r\n\r\nlet create_circle = (x, y) => {\r\n    let c_scale = 2.5;\r\n    let origin_x = x - c_scale * x;\r\n    let origin_y = y - c_scale * y;\r\n\r\n    return svg  // For new circle, go through the update process\r\n        .append(\"circle\")\r\n        .on(\"mouseover\", function()  {\r\n            d3.select(this).raise();\r\n            d3.select(this).attr(\"transform\", `matrix(${c_scale}, 0, 0, ${c_scale}, ${origin_x}, ${origin_y})`);\r\n        })\r\n        .on(\"mouseout\", function() {\r\n            d3.select(this).attr(\"transform\", \"\");\r\n        })\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", 10)\r\n};\r\n\r\nlet create_text = (x, y, text) => {\r\n    svg.append(\"text\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .text(text);\r\n};\r\n\r\nlet triangulation_count_init = () => {\r\n    svg.on(\"click\", () => {\r\n        if (d3.event.defaultPrevented) {\r\n            return\r\n        }\r\n        if (polygon_done) {\r\n            delete_polygon();\r\n            polygon_done = false;\r\n            return\r\n        }\r\n        let [x, y] = [d3.event.pageX, d3.event.pageY];\r\n        let line = connect_polygon(x, y);\r\n        console.log(lines);\r\n        if (line != null) {\r\n            lines.push(line);\r\n        }\r\n\r\n        points.push(x);\r\n        points.push(-(y + window.innerHeight));\r\n\r\n        let circle = create_circle(x, y).on(\"click\", () => {\r\n                d3.event.preventDefault();\r\n                let line = connect_polygon(x, y);\r\n                if (line != null) {\r\n                    lines.push(line);\r\n                }\r\n                let poly = triangulation__WEBPACK_IMPORTED_MODULE_0__[\"Polygon\"].from_slice(new Float32Array(points));\r\n                instructions.text(\"Number of triangulations: \" + poly.nb_triangulations());\r\n                polygon_done = true;\r\n            })\r\n        circles.push(circle);\r\n    });\r\n};\r\n\r\nlet melkman_init = () => {\r\n    let div_table = d3.select(\"#instructions\")\r\n        .append(\"div\")\r\n        .style(\"height\", \"90%\")\r\n        .style(\"width\", \"30em\")\r\n        .style(\"overflow\", \"auto\");\r\n    let table = div_table\r\n        .attr(\"class\", \"table table-responsive\")\r\n        .append(\"table\");\r\n\r\n    let thead = table.append('thead');\r\n    let\ttbody = table.append('tbody');\r\n\r\n    thead.append('tr')\r\n        .selectAll('th')\r\n        .data([\"Deque\", \"Left Tests\"]).enter()\r\n        .append('th')\r\n        .text(function (column) { return column; });\r\n\r\n    undo_move = () => {\r\n        d3.select(\"svg>text:last-child\").remove();\r\n        d3.select(\"svg>circle:last-child\").remove();\r\n        d3.select(\"svg>line:last-child\").remove();\r\n\r\n        points.pop();\r\n        points.pop();\r\n        d3.select(\"tbody>tr:last-child\").remove();\r\n    };\r\n\r\n    delete_polygon =  () => {\r\n        d3.selectAll(\"text\")\r\n            .remove();\r\n        d3.selectAll(\"circle\")\r\n            .remove();\r\n        d3.selectAll(\"line\")\r\n            .remove();\r\n        points = []\r\n        d3.selectAll(\"tbody>tr\").remove();\r\n    };\r\n\r\n\r\n    svg.on(\"click\", () => {\r\n        if (d3.event.defaultPrevented) {\r\n            return\r\n        }\r\n\r\n        let [x, y] = [d3.event.pageX, d3.event.pageY];\r\n        connect_polygon(x, y);\r\n\r\n        points.push(x);\r\n        points.push(-(y + window.innerHeight));\r\n\r\n        // TODO move c_scale\r\n        let c_scale = 1.5;\r\n\r\n        create_circle(x, y);\r\n        create_text(x,y-15,points.length / 2 - 1);\r\n\r\n\r\n        let poly = triangulation__WEBPACK_IMPORTED_MODULE_0__[\"Polygon\"].from_slice(new Float32Array(points));\r\n        let deque_and_left_string = poly.melkmans_output();\r\n        let [deque_string, left_string] = deque_and_left_string.split(\";\");\r\n        if (points.length / 2 > 2) {\r\n            let row = tbody.append(\"tr\");\r\n            row.append(\"td\")\r\n                .append(\"div\")\r\n                .attr(\"class\", \"deque\")\r\n                .text(deque_string);\r\n            row.append(\"td\")\r\n                .append(\"div\")\r\n                .attr(\"class\", \"left-tests\")\r\n                .text(left_string);\r\n        }\r\n        $('.table-responsive').scrollTop($('.table-responsive')[0].scrollHeight);\r\n\r\n    });\r\n};\r\n\r\n// melkman_init();\r\ntriangulation_count_init();\r\n// let test_arr = [346, conv(60), 292, conv(55), 26, conv(302), 97, conv(289), 155, conv(283), 221, conv(279), 282, conv(281), 342, conv(291), 403, conv(304), 467, conv(323), 545, conv(352)];\r\n// let poly = Polygon.from_slice(new Float32Array(test_arr));\r\n// console.log(poly.nb_triangulations());\r\n\r\n\r\n// let idk = [0,1,2,3,4,5,6,7];\r\n// for (let i = 0; i < 8; i++) {\r\n//     let new_arr = [0, 0, 0, 0, 0, 0, 0, 0];\r\n//     for (let j = 0; j < 8; j++) {\r\n//         idk[j] = (idk[j] + 1) % 8;\r\n//     }\r\n//     for (let k = 0; k < 8; k++) {\r\n//         new_arr[k] = test_arr[idk[k]];\r\n//     }\r\n//     console.log(idk);\r\n//     console.log(new_arr);\r\n//     let poly = Polygon.from_slice(new Float32Array(new_arr.flat()));\r\n//     console.log(poly.nb_triangulations());\r\n// }\r\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);